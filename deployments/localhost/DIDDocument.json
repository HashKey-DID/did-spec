{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDAddAssertion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDAddAuthentication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDAddContext",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDAddController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDAddVerificationMethod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDCreateDID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDDeleteAssertion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDDeleteAuthentication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDDeleteContext",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDDeleteController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDDeleteDID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "DIDUpdateVerificationMethod",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "auth",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "addAssertion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "auth",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "addAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ctx",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "addContext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "controller",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "controllerPublicKey",
          "type": "bytes"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "controller",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "controllerPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "assertions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "authentications",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "checkDidFormat",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "contexts",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "controllerPKs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "controller",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "controllerPublicKey",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "auth",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deleteAssertion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "auth",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deleteAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ctx",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deleteContext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "controller",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deleteController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vmId",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deleteVerificationMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "didExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getDid",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vmId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vmType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "controller",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pkKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pkValue",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "operateVerificationMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publicKey2Addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "readAssertion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "readAuthentication",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "readContext",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "readController",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "readVerificationMethod",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "verificationMethods",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8438ad91aa375aaf7a2b91314b00c0282db9a6a57eae2a734b89c869e08360e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "3268235",
    "logsBloom": "0x
    "blockHash": "0x171cdab90e9f95921700d7401c55f20fc502c587fa46f256e1139562ae5ae5eb",
    "transactionHash": "0xa8438ad91aa375aaf7a2b91314b00c0282db9a6a57eae2a734b89c869e08360e",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "3268235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "463b4e5f74f4d46eee4157987293ade5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDAddAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDAddAuthentication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDAddContext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDAddController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDAddVerificationMethod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDCreateDID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDDeleteAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDDeleteAuthentication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDDeleteContext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDDeleteController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDDeleteDID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DIDUpdateVerificationMethod\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"auth\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"addAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"auth\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"addAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ctx\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"addContext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"controllerPublicKey\",\"type\":\"bytes\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"controllerPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assertions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"authentications\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"checkDidFormat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contexts\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"controllerPKs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"controllerPublicKey\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"auth\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deleteAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"auth\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deleteAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ctx\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deleteContext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deleteController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vmId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deleteVerificationMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"didExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDid\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vmId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vmType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pkKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pkValue\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"operateVerificationMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publicKey2Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"readAssertion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"readAuthentication\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"readContext\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"readController\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"readVerificationMethod\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verificationMethods\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reslover.sol\":\"DIDDocument\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"contracts/base58.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Base58 {\\n    bytes constant ALPHABET =\\n        \\\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\\\";\\n\\n    /**\\n     * @notice encode is used to encode the given bytes in base58 standard.\\n     * @param data_ raw data, passed in as bytes.\\n     * @return base58 encoded data_, returned as bytes.\\n     */\\n    function encode(bytes memory data_) public pure returns (bytes memory) {\\n        unchecked {\\n            uint256 size = data_.length;\\n            uint256 zeroCount;\\n            while (zeroCount < size && data_[zeroCount] == 0) {\\n                zeroCount++;\\n            }\\n            size = zeroCount + ((size - zeroCount) * 8351) / 6115 + 1;\\n            bytes memory slot = new bytes(size);\\n            uint32 carry;\\n            int256 m;\\n            int256 high = int256(size) - 1;\\n            for (uint256 i = 0; i < data_.length; i++) {\\n                m = int256(size - 1);\\n                for (carry = uint8(data_[i]); m > high || carry != 0; m--) {\\n                    carry = carry + 256 * uint8(slot[uint256(m)]);\\n                    slot[uint256(m)] = bytes1(uint8(carry % 58));\\n                    carry /= 58;\\n                }\\n                high = m;\\n            }\\n            uint256 n;\\n            for (n = zeroCount; n < size && slot[n] == 0; n++) {}\\n            size = slot.length - (n - zeroCount);\\n            bytes memory out = new bytes(size);\\n            for (uint256 i = 0; i < size; i++) {\\n                uint256 j = i + n - zeroCount;\\n                out[i] = ALPHABET[uint8(slot[j])];\\n            }\\n            return out;\\n        }\\n    }\\n\\n    /**\\n     * @notice decode is used to decode the given string in base58 standard.\\n     * @param data_ data encoded with base58, passed in as bytes.\\n     * @return raw data, returned as bytes.\\n     */\\n    function decode(bytes memory data_) public pure returns (bytes memory) {\\n        unchecked {\\n            uint256 zero = 49;\\n            uint256 b58sz = data_.length;\\n            uint256 zcount = 0;\\n            for (uint256 i = 0; i < b58sz && uint8(data_[i]) == zero; i++) {\\n                zcount++;\\n            }\\n            uint256 t;\\n            uint256 c;\\n            bool f;\\n            bytes memory binu = new bytes(2 * (((b58sz * 8351) / 6115) + 1));\\n            uint32[] memory outi = new uint32[]((b58sz + 3) / 4);\\n            for (uint256 i = 0; i < data_.length; i++) {\\n                bytes1 r = data_[i];\\n                (c, f) = indexOf(ALPHABET, r);\\n                require(f, \\\"invalid base58 digit\\\");\\n                for (int256 k = int256(outi.length) - 1; k >= 0; k--) {\\n                    t = uint64(outi[uint256(k)]) * 58 + c;\\n                    c = t >> 32;\\n                    outi[uint256(k)] = uint32(t & 0xffffffff);\\n                }\\n            }\\n            uint64 mask = uint64(b58sz % 4) * 8;\\n            if (mask == 0) {\\n                mask = 32;\\n            }\\n            mask -= 8;\\n            uint256 outLen = 0;\\n            for (uint256 j = 0; j < outi.length; j++) {\\n                while (mask < 32) {\\n                    binu[outLen] = bytes1(uint8(outi[j] >> mask));\\n                    outLen++;\\n                    if (mask < 8) {\\n                        break;\\n                    }\\n                    mask -= 8;\\n                }\\n                mask = 24;\\n            }\\n            for (uint256 msb = zcount; msb < binu.length; msb++) {\\n                if (binu[msb] > 0) {\\n                    return slice(binu, msb - zcount, outLen);\\n                }\\n            }\\n            return slice(binu, 0, outLen);\\n        }\\n    }\\n\\n    /**\\n     * @notice encodeToString is used to encode the given byte in base58 standard.\\n     * @param data_ raw data, passed in as bytes.\\n     * @return base58 encoded data_, returned as a string.\\n     */\\n    function encodeToString(bytes memory data_) public pure returns (string memory) {\\n        return string(encode(data_));\\n    }\\n\\n    /**\\n     * @notice encodeFromString is used to encode the given string in base58 standard.\\n     * @param data_ raw data, passed in as a string.\\n     * @return base58 encoded data_, returned as bytes.\\n     */\\n    function encodeFromString(string memory data_)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return encode(bytes(data_));\\n    }\\n\\n    /**\\n     * @notice decode is used to decode the given string in base58 standard.\\n     * @param data_ data encoded with base58, passed in as string.\\n     * @return raw data, returned as bytes.\\n     */\\n    function decodeFromString(string memory data_)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return decode(bytes(data_));\\n    }\\n\\n    /**\\n     * @notice slice is used to slice the given byte, returns the bytes in the range of [start_, end_)\\n     * @param data_ raw data, passed in as bytes.\\n     * @param start_ start index.\\n     * @param end_ end index.\\n     * @return slice data\\n     */\\n    function slice(\\n        bytes memory data_,\\n        uint256 start_,\\n        uint256 end_\\n    ) public pure returns (bytes memory) {\\n        unchecked {\\n            bytes memory ret = new bytes(end_ - start_);\\n            for (uint256 i = 0; i < end_ - start_; i++) {\\n                ret[i] = data_[i + start_];\\n            }\\n            return ret;\\n        }\\n    }\\n\\n    /**\\n     * @notice indexOf is used to find where char_ appears in data_.\\n     * @param data_ raw data, passed in as bytes.\\n     * @param char_ target byte.\\n     * @return index, and whether the search was successful.\\n     */\\n    function indexOf(bytes memory data_, bytes1 char_)\\n        public\\n        pure\\n        returns (uint256, bool)\\n    {\\n        unchecked {\\n            for (uint256 i = 0; i < data_.length; i++) {\\n                if (data_[i] == char_) {\\n                    return (i, true);\\n                }\\n            }\\n            return (0, false);\\n        }\\n    }\\n}\",\"keccak256\":\"0x87b12910a1a9ae625bef2257e5af0283cf977a00dd91acaf90e43e785ab21813\",\"license\":\"MIT\"},\"contracts/reslover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./base58.sol\\\";\\n\\ncontract DIDDocument {\\n    // lib\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n    // event\\n    event DIDCreateDID(string,string);\\n    event DIDUpdateVerificationMethod(string,string);\\n    event DIDAddVerificationMethod(string,string);\\n    event DIDAddContext(string,string);\\n    event DIDDeleteContext(string,string);\\n    event DIDAddAuthentication(string,string);\\n    event DIDDeleteAuthentication(string,string);\\n    event DIDAddAssertion(string,string);\\n    event DIDDeleteAssertion(string,string);\\n    event DIDAddController(string,string);\\n    event DIDDeleteController(string,string);\\n    event DIDDeleteDID(string);\\n\\n    // todo \\u662f\\u5426\\u9700\\u8981\\u516c\\u94a5 modifier\\n    modifier authenticate(string memory did, bytes memory sig) {\\n        require(didExist[did], \\\"did not exist\\\");\\n        bytes32 controller = keccak256(getDid(msg.sender));\\n        require(controllerSet[did].contains(controller), \\\"not controller\\\");\\n        // \\n        bytes memory pk = controllerPKs[controller];\\n        address controllerAddr = publicKey2Addr(pk);\\n        require(_validate(sha256(bytes(did)), sig, controllerAddr));\\n        _;\\n    }\\n\\n    modifier exist(string memory did) {\\n        require(didExist[did], \\\"did not exist\\\");\\n        _;\\n    }\\n\\n    // did -> bool\\n    mapping(string => bool) public didExist;\\n\\n    // did -> context[]\\n    mapping(string => EnumerableSetUpgradeable.Bytes32Set) contextSet;\\n    mapping(bytes32 => bytes) public contexts;\\n    \\n    // did -> controller\\n    mapping(string => EnumerableSetUpgradeable.Bytes32Set) controllerSet;\\n    mapping(bytes32 => string) public controllers;\\n    mapping(bytes32 => bytes) public controllerPKs;\\n    \\n    // did -> verificationMethods\\n    mapping(string => mapping(bytes32 => bytes)) public verificationMethods;\\n    mapping(string => EnumerableSetUpgradeable.Bytes32Set) verificationMethodIds;\\n    \\n    // authentication\\n    mapping(string => EnumerableSetUpgradeable.Bytes32Set) authenticationSet;\\n    mapping(bytes32 => bytes) public authentications;\\n    \\n    // todo assertion\\n    mapping(string => EnumerableSetUpgradeable.Bytes32Set) assertionSet;\\n    mapping(bytes32 => bytes) public assertions;\\n\\n    // 1. only publicKey paramater\\n    function create(\\n        bytes calldata publicKey,\\n        string memory controller,\\n        bytes calldata controllerPublicKey\\n    ) public {\\n        address addr = publicKey2Addr(publicKey);\\n        bytes memory didBytes = getDid(addr);\\n        string memory did = string(didBytes);\\n        require(!didExist[did], \\\"did already exist\\\");\\n\\n        // bytes memory vmType = bytes(\\\"EcdsaSecp256k1VerificationKey2019\\\");\\n        // bytes memory vmId;\\n        // bytes memory vmPK;\\n        addContext(did, bytes(\\\"https://www.w3.org/ns/did/v1\\\"));\\n        // addContext(did, bytes(\\\"https://w3id.org/security/suites/secp256k1-2019\\\"));\\n\\n        //todo \\n        if (!checkDidFormat(controller)) {\\n            // controller not exist\\n            // vmId = bytes.concat(didBytes, bytes(\\\"#controller\\\"));\\n            // vmPK = bytes.concat(bytes(\\\"z\\\"), Base58.encode(publicKey));\\n            addController(did, did, publicKey);\\n\\n            // controllers[did] = did;\\n            // did2ControllerPK[did] = publicKey;\\n            // operateVerificationMethod(did, vmId, vmType, didBytes, bytes(\\\"publicKeyMultibase\\\"), vmPK);\\n        } else {\\n            // controller exist\\n            // vmId = bytes.concat(bytes(controller), bytes(\\\"#controller\\\"));\\n            // vmPK = bytes.concat(bytes(\\\"z\\\"), Base58.encode(controllerPublicKey));\\n            addController(did, controller, controllerPublicKey);\\n           \\n            // controllers[did] = controller;\\n            // did2ControllerPK[did] = controllerPublicKey;\\n            // operateVerificationMethod(did, vmId, vmType, bytes(controller), bytes(\\\"publicKeyMultibase\\\"), vmPK);\\n        }\\n        // add authentication\\n        // addAuthentication(did, vmId);\\n        \\n        didExist[did] = true;\\n        emit DIDCreateDID(did, controllers[keccak256(didBytes)]);\\n    }\\n\\n    /// \\n    function addController(string memory did, string memory controller, bytes memory controllerPublicKey) public {\\n        bytes32 controllerB32 = keccak256(bytes(controller));\\n        if (!controllerSet[did].contains(controllerB32)) {\\n            controllerSet[did].add(controllerB32);\\n            controllers[controllerB32] = controller;\\n            controllerPKs[controllerB32] = controllerPublicKey;\\n            emit DIDAddController(did, controller);\\n        }\\n    }\\n\\n    function addController(string memory did, string memory controller, bytes memory controllerPublicKey, bytes memory sig) public authenticate(did, sig) {\\n        require(controllerSet[did].contains(keccak256(bytes(controller))), \\\"already exist\\\");\\n        addController(did, controller, controllerPublicKey);\\n        emit DIDAddController(did, controller);\\n    }\\n\\n    // \\n    function deleteController(string memory did, string memory controller, bytes memory sig) public authenticate(did, sig) {\\n        bytes32 controllerB32 = keccak256(bytes(controller));\\n        require(!controllerSet[did].contains(controllerB32), \\\"not exist\\\");\\n        //\\n        controllerSet[did].remove(controllerB32);\\n        controllers[controllerB32] = \\\"\\\";\\n        controllerPKs[controllerB32] = bytes(\\\"\\\");\\n        //\\n        emit DIDDeleteController(did, controller);\\n    }\\n\\n    // \\n    function readController(string memory did) public view exist(did) returns (string memory) {\\n        bytes memory ctBytes = bytes(\\\"[\\\");\\n        // \\n        EnumerableSetUpgradeable.Bytes32Set storage _controllerSet = controllerSet[did];\\n        for (uint256 i=0; i<_controllerSet.length(); i++) {\\n           ctBytes = bytes.concat(ctBytes, bytes('\\\\\\\"'), contexts[_controllerSet.at(i)] , bytes('\\\\\\\",'));\\n        }\\n        ctBytes[ctBytes.length-1] = bytes1(\\\"]\\\");\\n        return string(ctBytes);\\n    }\\n\\n    // context\\n    function addContext(string memory did, bytes memory ctx) internal {\\n        bytes32 ctxHash = keccak256(ctx);\\n        if (contextSet[did].contains(ctxHash)){\\n            return;\\n        }\\n        contextSet[did].add(ctxHash);\\n        contexts[ctxHash] = ctx;\\n        emit DIDAddContext(did, string(ctx));\\n    }\\n\\n    function addContext(string memory did, string memory ctx, bytes memory sig) public authenticate(did, sig) {\\n        addContext(did, bytes(ctx));\\n    }\\n\\n    function deleteContext(string memory did, string memory ctx, bytes memory sig) public authenticate(did, sig) {\\n        bytes32 ctxHash = keccak256(bytes(ctx));\\n       \\n       require(contextSet[did].contains(ctxHash), \\\"ctx not exist\\\");\\n       contextSet[did].remove(ctxHash);\\n       emit DIDDeleteContext(did, string(ctx));\\n    }\\n\\n    function readContext(string memory did) public view exist(did) returns (string memory) {\\n        bytes memory ctBytes = bytes(\\\"[\\\");\\n        // \\n        EnumerableSetUpgradeable.Bytes32Set storage _contextSet = contextSet[did];\\n        for (uint256 i=0; i<_contextSet.length(); i++){\\n           ctBytes = bytes.concat(ctBytes, bytes('\\\\\\\"'), contexts[_contextSet.at(i)] , bytes('\\\\\\\",'));\\n        }\\n        ctBytes[ctBytes.length-1] = bytes1(\\\"]\\\");\\n        return string(ctBytes);\\n    }\\n\\n    // authentication\\n    function addAuthentication(string memory did, bytes memory auth) internal {\\n        bytes32 authHash = keccak256(bytes(auth));\\n\\n        // VerificationMethod id must exist.\\n        if (authenticationSet[did].contains(authHash) && verificationMethodIds[did].contains(authHash)){\\n            return;\\n        }\\n        authenticationSet[did].add(authHash);\\n        authentications[authHash] = auth;\\n        emit DIDAddAuthentication(did, string(auth));\\n    }\\n\\n    function addAuthentication(string memory did, string memory auth, bytes memory sig) public authenticate(did, sig){\\n        addAuthentication(did, bytes(auth));\\n    }\\n\\n    function deleteAuthentication(string memory did, string memory auth, bytes memory sig) public authenticate(did, sig) {\\n       bytes32 authHash = keccak256(bytes(auth));\\n       \\n       require(authenticationSet[did].contains(authHash), \\\"authentication not exist\\\");\\n       authenticationSet[did].remove(authHash);\\n       emit DIDDeleteAuthentication(did, string(auth));\\n    }\\n\\n    function readAuthentication(string memory did) public view exist(did) returns (string memory) {\\n        bytes memory authBytes = bytes(\\\"[\\\");\\n        // \\n        EnumerableSetUpgradeable.Bytes32Set storage _authenticationSet = authenticationSet[did];\\n        for (uint256 i=0; i<_authenticationSet.length(); i++){\\n           authBytes = bytes.concat(authBytes, bytes('\\\\\\\"'), authentications[_authenticationSet.at(i)] , bytes('\\\\\\\",'));\\n        }\\n        authBytes[authBytes.length-1] = bytes1(\\\"]\\\");\\n        return string(authBytes);\\n    }\\n\\n    // assertion\\n    function addAssertion(string memory did, bytes memory auth) internal {\\n        bytes32 authHash = keccak256(bytes(auth));\\n\\n        // VerificationMethod id must exist.\\n        if (assertionSet[did].contains(authHash) && verificationMethodIds[did].contains(authHash)) {\\n            return;\\n        }\\n        assertionSet[did].add(authHash);\\n        assertions[authHash] = auth;\\n        emit DIDAddAssertion(did, string(auth));\\n    }\\n\\n    function addAssertion(string memory did, string memory auth, bytes memory sig) public authenticate(did, sig) {\\n        addAssertion(did, bytes(auth));\\n    }\\n\\n    function deleteAssertion(string memory did, string memory auth, bytes memory sig) public authenticate(did, sig) {\\n       bytes32 authHash = keccak256(bytes(auth));\\n       \\n       require(assertionSet[did].contains(authHash), \\\"authentication not exist\\\");\\n       assertionSet[did].remove(authHash);\\n       emit DIDDeleteAssertion(did, string(auth));\\n    }\\n\\n    function readAssertion(string memory did) public view exist(did) returns (string memory) {\\n        bytes memory assertBytes = bytes(\\\"[\\\");\\n        // \\n        EnumerableSetUpgradeable.Bytes32Set storage _assertionSet = assertionSet[did];\\n        for (uint256 i=0; i<_assertionSet.length(); i++){\\n           assertBytes = bytes.concat(assertBytes, bytes('\\\\\\\"'), assertions[_assertionSet.at(i)] , bytes('\\\\\\\",'));\\n        }\\n        assertBytes[assertBytes.length-1] = bytes1(\\\"]\\\");\\n        return string(assertBytes);\\n    }\\n\\n    // add/update VerificationMethod\\n    function operateVerificationMethod(string memory did, bytes memory vmId, bytes memory vmType, bytes memory controller, bytes memory pkKey, bytes memory pkValue) internal {\\n        bytes memory b1 = bytes.concat(bytes('{\\\\\\\"id\\\\\\\": \\\\\\\"'), vmId, bytes('\\\\\\\",'));\\n        bytes memory b2 = bytes.concat(bytes('\\\\\\\"type\\\\\\\": \\\\\\\"'), vmType, bytes('\\\\\\\",'));\\n        bytes memory b3 = bytes.concat(bytes('\\\\\\\"controller\\\\\\\": \\\\\\\"'), controller, bytes('\\\\\\\",'));\\n        bytes memory b4 = bytes.concat(bytes('\\\\\\\"'), pkKey, bytes('\\\\\\\": \\\\\\\"'), pkValue, bytes('\\\\\\\"}'));\\n        bytes memory vm = bytes.concat(b1, b2, b3, b4);\\n\\n        bytes32 vmIdHash = sha256(vmId);\\n        if (verificationMethodIds[did].contains(vmIdHash)) {\\n            emit DIDUpdateVerificationMethod(did, string(vm));\\n        } else {\\n            verificationMethodIds[did].add(vmIdHash);\\n            emit DIDAddVerificationMethod(did, string(vm));\\n        }\\n        verificationMethods[did][vmIdHash] = vm;\\n    }\\n    \\n    function operateVerificationMethod(string memory did, string memory vmId, string memory vmType, string memory controller, string memory pkKey, string memory pkValue, bytes memory sig) public authenticate(did, sig) {\\n        operateVerificationMethod(did, bytes(vmId), bytes(vmType), bytes(controller), bytes(pkKey), bytes(pkValue));\\n    }\\n\\n    function deleteVerificationMethod(string memory did,string memory vmId, bytes memory sig) public authenticate(did, sig) {\\n        bytes32 vmIdHash = sha256(bytes(vmId));\\n        require(verificationMethodIds[did].contains(vmIdHash), \\\"VerificationMethod Id not exist\\\");\\n        verificationMethodIds[did].remove(vmIdHash);\\n        verificationMethods[did][vmIdHash] = bytes(\\\"\\\");\\n    }\\n\\n    function readVerificationMethod(string memory did) public view exist(did) returns (string memory) {\\n        bytes memory verificationBytes = bytes(\\\"[\\\");\\n        EnumerableSetUpgradeable.Bytes32Set storage vms = verificationMethodIds[did];\\n        for(uint i=0; i < vms.length(); i++){\\n            bytes memory pk = verificationMethods[did][vms.at(i)];\\n            verificationBytes = bytes.concat(verificationBytes, pk, bytes(','));\\n        }\\n        verificationBytes[verificationBytes.length-1] = bytes1(\\\"]\\\");\\n        return string(verificationBytes);\\n    }\\n\\n    function resolve(string memory did) public exist(did) view returns (string memory){\\n        bytes memory document = bytes(\\\"{\\\");\\n        document = bytes.concat(document, bytes('\\\\\\\"@context\\\\\\\":'), bytes(readContext(did)), bytes(','));\\n        document = bytes.concat(document, bytes('\\\\\\\"id\\\\\\\":'), bytes('\\\\\\\"'),bytes(did), bytes('\\\\\\\",'));\\n        document = bytes.concat(document, bytes('\\\\\\\"controller\\\\\\\":'), bytes('\\\\\\\"'),bytes(readController(did)), bytes('\\\\\\\",'));\\n        document = bytes.concat(document, bytes('\\\\\\\"verificationMethod\\\\\\\":'), bytes(readVerificationMethod(did)), bytes(','));\\n        document = bytes.concat(document, bytes('\\\\\\\"authentication\\\\\\\":'), bytes(readAuthentication(did)), bytes(','));\\n        document[document.length-1] = bytes1(\\\"}\\\");\\n        return string(document);\\n    }\\n\\n    function revoke(string memory did, bytes memory sig) authenticate(did, sig) public {\\n        didExist[did] = false;\\n        emit DIDDeleteDID(did);\\n    }\\n\\n    // todo\\n    function checkDidFormat(string memory did) public pure returns (bool) {\\n        // did:hashkey:0xb9c5714089478a327f09197987f16f9e5d936e8a\\n        if (bytes(did).length != 52) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function getDid(address addr) public pure returns(bytes memory) {\\n        return bytes(string.concat(\\\"did:hsk:\\\", toString(addr)));\\n    }\\n\\n    function publicKey2Addr(bytes memory publicKey) public pure returns(address){\\n        address addr = address(uint160(uint256(keccak256(publicKey))));\\n        return addr;\\n    }\\n\\n    function _validate(bytes32 message, bytes memory signature, address signer_) internal pure returns (bool) {\\n        require(signer_ != address(0) && signature.length == 65);\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v = uint8(signature[64]) + 27;\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n        }\\n        return ecrecover(message, v, r, s) == signer_;\\n    }\\n\\n    function _toBytes(address a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, a)\\n            )\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function toString(address account) public pure returns(string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function toString(bytes memory data) public pure returns(string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(data.length * 2);\\n        for (uint i = 0; i < data.length; i++) {\\n            str[i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n            str[1+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x85e4ca14bf2a00a02ec35780885e49cb6b2e82aa052a33b00a810d134e86aff5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613a27806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80637616ec441161010f578063d60715b5116100a2578063e7ba307e11610071578063e7ba307e1461044c578063f6d36f611461045f578063fbae406a14610472578063fc3ca4451461048557600080fd5b8063d60715b514610400578063dcc3504014610413578063decf32eb14610426578063e70f56311461043957600080fd5b80639ec4d358116100de5780639ec4d35814610389578063be7438721461039c578063c5413847146103af578063d38cca61146103ed57600080fd5b80637616ec441461033d57806381c491df14610350578063828419d61461036357806394ea6e2a1461037657600080fd5b806345560dcb116101875780635c70834e116101565780635c70834e146102f157806362ea1b221461030457806368b8a9b81461031757806371aad10d1461032a57600080fd5b806345560dcb146102a5578063461a4478146102b857806349dec017146102cb57806356ca623e146102de57600080fd5b8063100c4088116101c3578063100c40881461023b57806313677d841461024e578063231356fd1461027f5780633f7885dd1461029257600080fd5b8063021d248e146101ea5780630eb0b769146102135780630ec0865b14610228575b600080fd5b6101fd6101f8366004613007565b610498565b60405161020a9190613094565b60405180910390f35b6102266102213660046130a7565b6105ff565b005b6102266102363660046131c2565b6107c4565b6102266102493660046131c2565b610882565b61026761025c366004613007565b805160209091012090565b6040516001600160a01b03909116815260200161020a565b61022661028d3660046131c2565b610aa2565b6102266102a03660046131c2565b610cdc565b6101fd6102b336600461324a565b610f43565b6101fd6102c6366004613007565b610fdd565b6101fd6102d9366004613007565b6112af565b6101fd6102ec366004613263565b611457565b6101fd6102ff36600461324a565b611495565b6102266103123660046131c2565b6114ae565b61022661032536600461328c565b61160f565b6101fd610338366004613007565b6117ef565b61022661034b3660046131c2565b611994565b6101fd61035e36600461324a565b611b8c565b6101fd610371366004613007565b611ba5565b6102266103843660046131c2565b611cbc565b6102266103973660046131c2565b611e13565b6101fd6103aa366004613007565b612000565b6103dd6103bd366004613007565b805160208183018101805160008252928201919093012091525460ff1681565b604051901515815260200161020a565b6101fd6103fb366004613263565b612117565b6101fd61040e36600461324a565b612148565b6102266104213660046131c2565b612161565b6101fd610434366004613007565b6122b8565b6101fd610447366004613339565b6123cf565b6103dd61045a366004613007565b612403565b61022661046d36600461337e565b61241e565b6101fd61048036600461324a565b6125db565b61022661049336600461342b565b6125f4565b6060816000816040516104ab91906134c0565b9081526040519081900360200190205460ff166104e35760405162461bcd60e51b81526004016104da906134dc565b60405180910390fd5b6040805180820182526001808252605b60f81b60208301529151909160009161050d9087906134c0565b9081526020016040518091039020905060005b61052982612804565b8110156105b8576040805180820190915260018152601160f91b6020820152839060026000610558868661280e565b815260200190815260200160002060405180604001604052806002815260200161088b60f21b8152506040516020016105949493929190613537565b604051602081830303815290604052925080806105b090613600565b915050610520565b50605d60f81b82600184516105cd9190613619565b815181106105dd576105dd61362c565b60200101906001600160f81b031916908160001a905350909250505b50919050565b868160008260405161061191906134c0565b9081526040519081900360200190205460ff166106405760405162461bcd60e51b81526004016104da906134dc565b600061064b33612117565b80519060200120905061067d8160038560405161066891906134c0565b90815260405190819003602001902090612821565b6106995760405162461bcd60e51b81526004016104da90613642565b600081815260056020526040812080546106b290613503565b80601f01602080910402602001604051908101604052809291908181526020018280546106de90613503565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b50505050509050600061074382805160209091012090565b905061079f60028660405161075891906134c0565b602060405180830381855afa158015610775573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610798919061366a565b8583612839565b6107a857600080fd5b6107b68c8c8c8c8c8c612920565b505050505050505050505050565b815160208301206040516107e29082906003906106689088906134c0565b61087c5761080f816003866040516107fa91906134c0565b90815260405190819003602001902090612c08565b50600081815260046020526040902061082884826136d2565b50600081815260056020526040902061084183826136d2565b507fbbab1b0a32c85fd824eebf9faf3c52497ab90e75484334b9f84e1100f67c60448484604051610873929190613792565b60405180910390a15b50505050565b828160008260405161089491906134c0565b9081526040519081900360200190205460ff166108c35760405162461bcd60e51b81526004016104da906134dc565b60006108ce33612117565b8051906020012090506108eb8160038560405161066891906134c0565b6109075760405162461bcd60e51b81526004016104da90613642565b6000818152600560205260408120805461092090613503565b80601f016020809104026020016040519081016040528092919081815260200182805461094c90613503565b80156109995780601f1061096e57610100808354040283529160200191610999565b820191906000526020600020905b81548152906001019060200180831161097c57829003601f168201915b5050505050905060006109b182805160209091012090565b90506109c660028660405161075891906134c0565b6109cf57600080fd5b865160208801206040516109ed908290600890610668908d906134c0565b610a345760405162461bcd60e51b8152602060048201526018602482015277185d5d1a195b9d1a58d85d1a5bdb881b9bdd08195e1a5cdd60421b60448201526064016104da565b610a5d8160088b604051610a4891906134c0565b90815260405190819003602001902090612c14565b507f352839fb572124a8f293b0ad18741d4206ba417bc6fd1631da1a6506f91550358989604051610a8f929190613792565b60405180910390a1505050505050505050565b8281600082604051610ab491906134c0565b9081526040519081900360200190205460ff16610ae35760405162461bcd60e51b81526004016104da906134dc565b6000610aee33612117565b805190602001209050610b0b8160038560405161066891906134c0565b610b275760405162461bcd60e51b81526004016104da90613642565b60008181526005602052604081208054610b4090613503565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6c90613503565b8015610bb95780601f10610b8e57610100808354040283529160200191610bb9565b820191906000526020600020905b815481529060010190602001808311610b9c57829003601f168201915b505050505090506000610bd182805160209091012090565b9050610be660028660405161075891906134c0565b610bef57600080fd5b86516020880120604051610c0d908290600390610668908d906134c0565b15610c465760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b60448201526064016104da565b610c5a8160038b604051610a4891906134c0565b506040805160208082018352600080835284815260049091529190912090610c8290826136d2565b506040805160208082018352600080835284815260059091529190912090610caa90826136d2565b507f02b87b52be2f3abf7960802afb12dc97b5c318e55f395547aaeef920d4b362ba8989604051610a8f929190613792565b8281600082604051610cee91906134c0565b9081526040519081900360200190205460ff16610d1d5760405162461bcd60e51b81526004016104da906134dc565b6000610d2833612117565b805190602001209050610d458160038560405161066891906134c0565b610d615760405162461bcd60e51b81526004016104da90613642565b60008181526005602052604081208054610d7a90613503565b80601f0160208091040260200160405190810160405280929190818152602001828054610da690613503565b8015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b505050505090506000610e0b82805160209091012090565b9050610e2060028660405161075891906134c0565b610e2957600080fd5b6000600288604051610e3b91906134c0565b602060405180830381855afa158015610e58573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e7b919061366a565b9050610e918160078b60405161066891906134c0565b610edd5760405162461bcd60e51b815260206004820152601f60248201527f566572696669636174696f6e4d6574686f64204964206e6f742065786973740060448201526064016104da565b610ef18160078b604051610a4891906134c0565b506040518060200160405280600081525060068a604051610f1291906134c0565b908152604080516020928190038301902060008581529252902090610f3790826136d2565b50505050505050505050565b60026020526000908152604090208054610f5c90613503565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8890613503565b8015610fd55780601f10610faa57610100808354040283529160200191610fd5565b820191906000526020600020905b815481529060010190602001808311610fb857829003601f168201915b505050505081565b606081600081604051610ff091906134c0565b9081526040519081900360200190205460ff1661101f5760405162461bcd60e51b81526004016104da906134dc565b6000604051806040016040528060018152602001607b60f81b8152509050806040518060400160405280600b81526020016a112031b7b73a32bc3a111d60a91b81525061106b86610498565b604051806040016040528060018152602001600b60fa1b81525060405160200161109894939291906137c0565b60408051601f19818403018152828201825260058352641134b2111d60d91b6020848101919091528251808401845260018152601160f91b81830152835180850185526002815261088b60f21b818401529351929550611100948694909391928a9201613817565b60408051601f198184030181528282018252600d83526c1131b7b73a3937b63632b9111d60991b602084810191909152825180840190935260018352601160f91b90830152925082919061115387612000565b60405180604001604052806002815260200161088b60f21b815250604051602001611182959493929190613817565b60408051601f198184030181528282019091526015825274113b32b934b334b1b0ba34b7b726b2ba3437b2111d60591b6020830152915081906111c4866112af565b604051806040016040528060018152602001600b60fa1b8152506040516020016111f194939291906137c0565b60408051601f1981840301815282820190915260118252701130baba3432b73a34b1b0ba34b7b7111d60791b60208301529150819061122f866122b8565b604051806040016040528060018152602001600b60fa1b81525060405160200161125c94939291906137c0565b6040516020818303038152906040529050607d60f81b81600183516112819190613619565b815181106112915761129161362c565b60200101906001600160f81b031916908160001a9053509392505050565b6060816000816040516112c291906134c0565b9081526040519081900360200190205460ff166112f15760405162461bcd60e51b81526004016104da906134dc565b60408051808201825260018152605b60f81b6020820152905160009060079061131b9087906134c0565b9081526020016040518091039020905060005b61133782612804565b8110156105b857600060068760405161135091906134c0565b908152604051908190036020019020600061136b858561280e565b8152602001908152602001600020805461138490613503565b80601f01602080910402602001604051908101604052809291908181526020018280546113b090613503565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b505050505090508381604051806040016040528060018152602001600b60fa1b81525060405160200161143293929190613882565b604051602081830303815290604052935050808061144f90613600565b91505061132e565b604051606082811b6bffffffffffffffffffffffff191660208301529061148f906034016040516020818303038152906040526117ef565b92915050565b60056020526000908152604090208054610f5c90613503565b82816000826040516114c091906134c0565b9081526040519081900360200190205460ff166114ef5760405162461bcd60e51b81526004016104da906134dc565b60006114fa33612117565b8051906020012090506115178160038560405161066891906134c0565b6115335760405162461bcd60e51b81526004016104da90613642565b6000818152600560205260408120805461154c90613503565b80601f016020809104026020016040519081016040528092919081815260200182805461157890613503565b80156115c55780601f1061159a576101008083540402835291602001916115c5565b820191906000526020600020905b8154815290600101906020018083116115a857829003601f168201915b5050505050905060006115dd82805160209091012090565b90506115f260028660405161075891906134c0565b6115fb57600080fd5b6116058888612c20565b5050505050505050565b838160008260405161162191906134c0565b9081526040519081900360200190205460ff166116505760405162461bcd60e51b81526004016104da906134dc565b600061165b33612117565b8051906020012090506116788160038560405161066891906134c0565b6116945760405162461bcd60e51b81526004016104da90613642565b600081815260056020526040812080546116ad90613503565b80601f01602080910402602001604051908101604052809291908181526020018280546116d990613503565b80156117265780601f106116fb57610100808354040283529160200191611726565b820191906000526020600020905b81548152906001019060200180831161170957829003601f168201915b50505050509050600061173e82805160209091012090565b905061175360028660405161075891906134c0565b61175c57600080fd5b611777888051906020012060038b60405161066891906134c0565b6117b35760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e48195e1a5cdd609a1b60448201526064016104da565b6117be8989896107c4565b7fbbab1b0a32c85fd824eebf9faf3c52497ab90e75484334b9f84e1100f67c60448989604051610a8f929190613792565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516060919060009061182a9060026138c5565b67ffffffffffffffff81111561184257611842612f64565b6040519080825280601f01601f19166020018201604052801561186c576020820181803683370190505b50905060005b845181101561198c578260048683815181106118905761189061362c565b016020015182516001600160f81b031990911690911c60f81c9081106118b8576118b861362c565b01602001516001600160f81b031916826118d38360026138c5565b815181106118e3576118e361362c565b60200101906001600160f81b031916908160001a9053508285828151811061190d5761190d61362c565b602091010151815160f89190911c600f1690811061192d5761192d61362c565b01602001516001600160f81b031916826119488360026138c5565b6119539060016138e4565b815181106119635761196361362c565b60200101906001600160f81b031916908160001a9053508061198481613600565b915050611872565b509392505050565b82816000826040516119a691906134c0565b9081526040519081900360200190205460ff166119d55760405162461bcd60e51b81526004016104da906134dc565b60006119e033612117565b8051906020012090506119fd8160038560405161066891906134c0565b611a195760405162461bcd60e51b81526004016104da90613642565b60008181526005602052604081208054611a3290613503565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5e90613503565b8015611aab5780601f10611a8057610100808354040283529160200191611aab565b820191906000526020600020905b815481529060010190602001808311611a8e57829003601f168201915b505050505090506000611ac382805160209091012090565b9050611ad860028660405161075891906134c0565b611ae157600080fd5b86516020880120604051611aff908290600a90610668908d906134c0565b611b465760405162461bcd60e51b8152602060048201526018602482015277185d5d1a195b9d1a58d85d1a5bdb881b9bdd08195e1a5cdd60421b60448201526064016104da565b611b5a81600a8b604051610a4891906134c0565b507f0575a4a7f74a81f3c502b342a97042841e0e7c1660dfb7dc370ce86b1074796b8989604051610a8f929190613792565b60096020526000908152604090208054610f5c90613503565b606081600081604051611bb891906134c0565b9081526040519081900360200190205460ff16611be75760405162461bcd60e51b81526004016104da906134dc565b60408051808201825260018152605b60f81b60208201529051600090600a90611c119087906134c0565b9081526020016040518091039020905060005b611c2d82612804565b8110156105b8576040805180820190915260018152601160f91b60208201528390600b6000611c5c868661280e565b815260200190815260200160002060405180604001604052806002815260200161088b60f21b815250604051602001611c989493929190613537565b60405160208183030381529060405292508080611cb490613600565b915050611c24565b8281600082604051611cce91906134c0565b9081526040519081900360200190205460ff16611cfd5760405162461bcd60e51b81526004016104da906134dc565b6000611d0833612117565b805190602001209050611d258160038560405161066891906134c0565b611d415760405162461bcd60e51b81526004016104da90613642565b60008181526005602052604081208054611d5a90613503565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8690613503565b8015611dd35780601f10611da857610100808354040283529160200191611dd3565b820191906000526020600020905b815481529060010190602001808311611db657829003601f168201915b505050505090506000611deb82805160209091012090565b9050611e0060028660405161075891906134c0565b611e0957600080fd5b6116058888612ccf565b8281600082604051611e2591906134c0565b9081526040519081900360200190205460ff16611e545760405162461bcd60e51b81526004016104da906134dc565b6000611e5f33612117565b805190602001209050611e7c8160038560405161066891906134c0565b611e985760405162461bcd60e51b81526004016104da90613642565b60008181526005602052604081208054611eb190613503565b80601f0160208091040260200160405190810160405280929190818152602001828054611edd90613503565b8015611f2a5780601f10611eff57610100808354040283529160200191611f2a565b820191906000526020600020905b815481529060010190602001808311611f0d57829003601f168201915b505050505090506000611f4282805160209091012090565b9050611f5760028660405161075891906134c0565b611f6057600080fd5b86516020880120604051611f7e908290600190610668908d906134c0565b611fba5760405162461bcd60e51b815260206004820152600d60248201526c18dd1e081b9bdd08195e1a5cdd609a1b60448201526064016104da565b611fce8160018b604051610a4891906134c0565b507f6b007b34ce73f14ba13bddee394124c5e3445545777ce0c2a7645c63b88225628989604051610a8f929190613792565b60608160008160405161201391906134c0565b9081526040519081900360200190205460ff166120425760405162461bcd60e51b81526004016104da906134dc565b60408051808201825260018152605b60f81b6020820152905160009060039061206c9087906134c0565b9081526020016040518091039020905060005b61208882612804565b8110156105b8576040805180820190915260018152601160f91b60208201528390600260006120b7868661280e565b815260200190815260200160002060405180604001604052806002815260200161088b60f21b8152506040516020016120f39493929190613537565b6040516020818303038152906040529250808061210f90613600565b91505061207f565b606061212282611457565b60405160200161213291906138f7565b6040516020818303038152906040529050919050565b600b6020526000908152604090208054610f5c90613503565b828160008260405161217391906134c0565b9081526040519081900360200190205460ff166121a25760405162461bcd60e51b81526004016104da906134dc565b60006121ad33612117565b8051906020012090506121ca8160038560405161066891906134c0565b6121e65760405162461bcd60e51b81526004016104da90613642565b600081815260056020526040812080546121ff90613503565b80601f016020809104026020016040519081016040528092919081815260200182805461222b90613503565b80156122785780601f1061224d57610100808354040283529160200191612278565b820191906000526020600020905b81548152906001019060200180831161225b57829003601f168201915b50505050509050600061229082805160209091012090565b90506122a560028660405161075891906134c0565b6122ae57600080fd5b6116058888612d56565b6060816000816040516122cb91906134c0565b9081526040519081900360200190205460ff166122fa5760405162461bcd60e51b81526004016104da906134dc565b60408051808201825260018152605b60f81b602082015290516000906008906123249087906134c0565b9081526020016040518091039020905060005b61234082612804565b8110156105b8576040805180820190915260018152601160f91b602082015283906009600061236f868661280e565b815260200190815260200160002060405180604001604052806002815260200161088b60f21b8152506040516020016123ab9493929190613537565b604051602081830303815290604052925080806123c790613600565b915050612337565b81516020818401810180516006825292820194820194909420919093529091526000908152604090208054610f5c90613503565b6000815160341461241657506000919050565b506001919050565b818160008260405161243091906134c0565b9081526040519081900360200190205460ff1661245f5760405162461bcd60e51b81526004016104da906134dc565b600061246a33612117565b8051906020012090506124878160038560405161066891906134c0565b6124a35760405162461bcd60e51b81526004016104da90613642565b600081815260056020526040812080546124bc90613503565b80601f01602080910402602001604051908101604052809291908181526020018280546124e890613503565b80156125355780601f1061250a57610100808354040283529160200191612535565b820191906000526020600020905b81548152906001019060200180831161251857829003601f168201915b50505050509050600061254d82805160209091012090565b905061256260028660405161075891906134c0565b61256b57600080fd5b6000808860405161257c91906134c0565b908152604051908190036020018120805492151560ff19909316929092179091557f91b4f3ac42eee3434b3a9ef6ae3aeab143380793722a7ff7673cceb1df87660f906125ca908990613094565b60405180910390a150505050505050565b60046020526000908152604090208054610f5c90613503565b600061263586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061025c92505050565b9050600061264282612117565b9050600081905060008160405161265991906134c0565b9081526040519081900360200190205460ff16156126ad5760405162461bcd60e51b8152602060048201526011602482015270191a5908185b1c9958591e48195e1a5cdd607a1b60448201526064016104da565b6126ec816040518060400160405280601c81526020017f68747470733a2f2f7777772e77332e6f72672f6e732f6469642f763100000000815250612ccf565b6126f586612403565b61273f5761273a81828a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107c492505050565b612780565b612780818787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107c492505050565b600160008260405161279291906134c0565b9081526040805160209281900383018120805460ff1916941515949094179093558451858301206000908152600490925290207fc3c7b72b23754974738f9287ba8cf93359f1fde4ef533b2b96e9826321f37fbc916127f2918491613927565b60405180910390a15050505050505050565b600061148f825490565b600061281a8383612df8565b9392505050565b6000818152600183016020526040812054151561281a565b60006001600160a01b03821615801590612854575082516041145b61285d57600080fd5b6000806000856040815181106128755761287561362c565b01602001516128889060f81c601b6139c2565b90506020860151925060408601519150846001600160a01b0316600188838686604051600081526020016040526040516128de949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015612900573d6000803e3d6000fd5b505050602060405103516001600160a01b03161493505050509392505050565b6000604051806040016040528060088152602001673d9134b2111d101160c11b8152508660405180604001604052806002815260200161088b60f21b81525060405160200161297193929190613882565b60408051601f1981840301815282820182526009835268113a3cb832911d101160b91b602084810191909152825180840184526002815261088b60f21b8183015292519194506000936129c89390928a9201613882565b60408051601f198184030181528282018252600f83526e1131b7b73a3937b63632b9111d101160891b602084810191909152825180840184526002815261088b60f21b818301529251919450600093612a259390928a9201613882565b60408051601f19818403018152828201825260018352601160f91b602084810191909152825180840184526004815263111d101160e11b81830152835180850185526002815261227d60f01b818401529351929550600094612a8e9490938b938b929101613817565b6040516020818303038152906040529050600084848484604051602001612ab894939291906137c0565b6040516020818303038152906040529050600060028b604051612adb91906134c0565b602060405180830381855afa158015612af8573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b1b919061366a565b9050612b318160078e60405161066891906134c0565b15612b74577fff66a5005b4ccd6dd4523b1cf78542f24c8d5f2c3f88172df9cb10b1affa1eb88c83604051612b67929190613792565b60405180910390a1612bc3565b612b888160078e6040516107fa91906134c0565b507f2131897197c045deeb643fcf11857033e2e17a6abaf87a7c8d2c0209747da52c8c83604051612bba929190613792565b60405180910390a15b8160068d604051612bd491906134c0565b908152604080516020928190038301902060008581529252902090612bf990826136d2565b50505050505050505050505050565b600061281a8383612e22565b600061281a8383612e71565b80516020820120604051612c3e908290600a906106689087906134c0565b8015612c595750612c598160078560405161066891906134c0565b15612c6357505050565b612c7781600a856040516107fa91906134c0565b506000818152600b60205260409020612c9083826136d2565b507facdd6cb720810e6d592cfc9012612aeb59c2cf42bbb61ecd47c550bc6e21de658383604051612cc2929190613792565b60405180910390a1505050565b80516020820120604051612ced9082906001906106689087906134c0565b15612cf757505050565b612d0b816001856040516107fa91906134c0565b506000818152600260205260409020612d2483826136d2565b507f204b8be294fc8317dce020f12a163546d7849a84d45e9885c57109fa8947d8448383604051612cc2929190613792565b80516020820120604051612d749082906008906106689087906134c0565b8015612d8f5750612d8f8160078560405161066891906134c0565b15612d9957505050565b612dad816008856040516107fa91906134c0565b506000818152600960205260409020612dc683826136d2565b507f66b9a12bf964d62dd628845d080d864253666cebba5ed5d1a699ce5e3c9d9d3f8383604051612cc2929190613792565b6000826000018281548110612e0f57612e0f61362c565b9060005260206000200154905092915050565b6000818152600183016020526040812054612e695750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b60008181526001830160205260408120548015612f5a576000612e95600183613619565b8554909150600090612ea990600190613619565b9050818114612f0e576000866000018281548110612ec957612ec961362c565b9060005260206000200154905080876000018481548110612eec57612eec61362c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f1f57612f1f6139db565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061148f565b600091505061148f565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612f8b57600080fd5b813567ffffffffffffffff80821115612fa657612fa6612f64565b604051601f8301601f19908116603f01168101908282118183101715612fce57612fce612f64565b81604052838152866020858801011115612fe757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561301957600080fd5b813567ffffffffffffffff81111561303057600080fd5b61303c84828501612f7a565b949350505050565b60005b8381101561305f578181015183820152602001613047565b50506000910152565b60008151808452613080816020860160208601613044565b601f01601f19169290920160200192915050565b60208152600061281a6020830184613068565b600080600080600080600060e0888a0312156130c257600080fd5b873567ffffffffffffffff808211156130da57600080fd5b6130e68b838c01612f7a565b985060208a01359150808211156130fc57600080fd5b6131088b838c01612f7a565b975060408a013591508082111561311e57600080fd5b61312a8b838c01612f7a565b965060608a013591508082111561314057600080fd5b61314c8b838c01612f7a565b955060808a013591508082111561316257600080fd5b61316e8b838c01612f7a565b945060a08a013591508082111561318457600080fd5b6131908b838c01612f7a565b935060c08a01359150808211156131a657600080fd5b506131b38a828b01612f7a565b91505092959891949750929550565b6000806000606084860312156131d757600080fd5b833567ffffffffffffffff808211156131ef57600080fd5b6131fb87838801612f7a565b9450602086013591508082111561321157600080fd5b61321d87838801612f7a565b9350604086013591508082111561323357600080fd5b5061324086828701612f7a565b9150509250925092565b60006020828403121561325c57600080fd5b5035919050565b60006020828403121561327557600080fd5b81356001600160a01b038116811461281a57600080fd5b600080600080608085870312156132a257600080fd5b843567ffffffffffffffff808211156132ba57600080fd5b6132c688838901612f7a565b955060208701359150808211156132dc57600080fd5b6132e888838901612f7a565b945060408701359150808211156132fe57600080fd5b61330a88838901612f7a565b9350606087013591508082111561332057600080fd5b5061332d87828801612f7a565b91505092959194509250565b6000806040838503121561334c57600080fd5b823567ffffffffffffffff81111561336357600080fd5b61336f85828601612f7a565b95602094909401359450505050565b6000806040838503121561339157600080fd5b823567ffffffffffffffff808211156133a957600080fd5b6133b586838701612f7a565b935060208501359150808211156133cb57600080fd5b506133d885828601612f7a565b9150509250929050565b60008083601f8401126133f457600080fd5b50813567ffffffffffffffff81111561340c57600080fd5b60208301915083602082850101111561342457600080fd5b9250929050565b60008060008060006060868803121561344357600080fd5b853567ffffffffffffffff8082111561345b57600080fd5b61346789838a016133e2565b9097509550602088013591508082111561348057600080fd5b61348c89838a01612f7a565b945060408801359150808211156134a257600080fd5b506134af888289016133e2565b969995985093965092949392505050565b600082516134d2818460208701613044565b9190910192915050565b6020808252600d908201526c191a59081b9bdd08195e1a5cdd609a1b604082015260600190565b600181811c9082168061351757607f821691505b6020821081036105f957634e487b7160e01b600052602260045260246000fd5b60008551602061354a8285838b01613044565b86519184019161355d8184848b01613044565b865492019160009061356e81613503565b60018281168015613586576001811461359b576135c7565b60ff19841687528215158302870194506135c7565b8a6000528560002060005b848110156135bf578154898201529083019087016135a6565b505082870194505b50505050855192506135dc8382848901613044565b909101979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201613612576136126135ea565b5060010190565b8181038181111561148f5761148f6135ea565b634e487b7160e01b600052603260045260246000fd5b6020808252600e908201526d3737ba1031b7b73a3937b63632b960911b604082015260600190565b60006020828403121561367c57600080fd5b5051919050565b601f8211156136cd57600081815260208120601f850160051c810160208610156136aa5750805b601f850160051c820191505b818110156136c9578281556001016136b6565b5050505b505050565b815167ffffffffffffffff8111156136ec576136ec612f64565b613700816136fa8454613503565b84613683565b602080601f831160018114613735576000841561371d5750858301515b600019600386901b1c1916600185901b1785556136c9565b600085815260208120601f198616915b8281101561376457888601518255948401946001909101908401613745565b50858210156137825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006137a56040830185613068565b82810360208401526137b78185613068565b95945050505050565b600085516137d2818460208a01613044565b8551908301906137e6818360208a01613044565b85519101906137f9818360208901613044565b845191019061380c818360208801613044565b019695505050505050565b60008651613829818460208b01613044565b86519083019061383d818360208b01613044565b8651910190613850818360208a01613044565b8551910190613863818360208901613044565b8451910190613876818360208801613044565b01979650505050505050565b60008451613894818460208901613044565b8451908301906138a8818360208901613044565b84519101906138bb818360208801613044565b0195945050505050565b60008160001904831182151516156138df576138df6135ea565b500290565b8082018082111561148f5761148f6135ea565b673234b21d3439b59d60c11b81526000825161391a816008850160208701613044565b9190910160080192915050565b60408152600061393a6040830185613068565b6020838203818501526000855461395081613503565b8085526001828116801561396b5760018114613985576139b3565b60ff1984168787015282151560051b8701860194506139b3565b896000528560002060005b848110156139ab578154898201890152908301908701613990565b880187019550505b50929998505050505050505050565b60ff818116838216019081111561148f5761148f6135ea565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207cd1f2fe6d67a49f7a5394ea8f1eee53d77b3ae790e8b9b1886fe3e4891f378a64736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1414,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "didExist",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 1419,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "contextSet",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 1423,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "contexts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1428,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "controllerSet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 1432,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "controllers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 1436,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "controllerPKs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1442,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "verificationMethods",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_bytes32,t_bytes_storage))"
      },
      {
        "astId": 1447,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "verificationMethodIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 1452,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "authenticationSet",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 1456,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "authentications",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1461,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "assertionSet",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 1465,
        "contract": "contracts/reslover.sol:DIDDocument",
        "label": "assertions",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_bytes32,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(bytes32 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Bytes32Set)204_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct EnumerableSetUpgradeable.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)204_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Bytes32Set",
        "members": [
          {
            "astId": 203,
            "contract": "contracts/reslover.sol:DIDDocument",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5,
            "contract": "contracts/reslover.sol:DIDDocument",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "contracts/reslover.sol:DIDDocument",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}